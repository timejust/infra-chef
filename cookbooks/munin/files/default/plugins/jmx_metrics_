#!/usr/bin/env perl
# ex:ts=4

=head1 NAME

jmx_metrics_ - Plugin to monitor the custom metrics

=head1 APPLICABLE SYSTEMS

Tested with Tomcat 5.5/6.0 on Sun JVM 6. Please use this plugin as a template for other application-server specific monitoring.

Any JVM that supports JMX should in theory do.

=head1 CONFIGURATION

[jmx_metrics_*]
env.ip 127.0.0.1
env.port 5400
env.username monitorRole
env.password SomethingSecret
# The critical and warning levels are in % of the max value
env.max 4000
env.critical 90
env.warning 70

env.JRE_HOME /usr/lib/jvm/java-6-sun/jre

Needed configuration on the Tomcat side: add

-Dcom.sun.management.jmxremote \
-Dcom.sun.management.jmxremote.port=5400 \
-Dcom.sun.management.jmxremote.ssl=false \
-Dcom.sun.management.jmxremote.authenticate=false

to CATALINA_OPTS in your startup scripts.

Replace authenticate=false with
-Dcom.sun.management.jmxremote.password.file=/etc/tomcat/jmxremote.password \
-Dcom.sun.management.jmxremote.access.file=/etc/tomcat/jmxremote.access
...if you want authentication.

jmxremote.password:
monitorRole SomethingSecret

jmxremote.access:
monitorRole readonly

=head1 BUGS

No encryption supported in the JMX connection.

=head1 AUTHORS

=encoding UTF-8

Alejandro Diaz. Based on jmx_tomcat_dbpools

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

#%# family=manual

=cut

use strict;

my @parts = split('_', $0);
my $service_name = @parts[2];
my $package_name = lc(@parts[2]);
my @metric_names= @parts[3..$#parts - 1];
my $metric_type= @parts[$#parts];

my $beans="com.smartdate.$package_name:name=" . $service_name . "ServerInformation";
my $munin_jar='/usr/share/munin/munin-jmx-plugins.jar';
my $java='/usr/bin/java';
my $ip=$ENV{'ip'} || "127.0.0.1";
my $port=$ENV{'port'} || "5400";

if($ENV{'JRE_HOME'}) {
	$java="$ENV{'JRE_HOME'}/bin/java";
}

sub config() {
	print "graph_title $service_name Server Metrics (" . join(', ', @metric_names) . ")\n";
	print "graph_vlabel Total count\n";
	print "graph_info Shows the metrics for the service\n";
	print "graph_category services\n";

	for my $label (@metric_names) {
		my $field = "v" . $label; # Prefix with a known good char, as field names can't start with a number
		$field =~ s/[^A-Za-z0-9]/_/g;
		print "$field.label $label\n";
		if(defined $ENV{'max'}) {
			print "$field.max $ENV{'max'}\n";
		}
		print "$field.type $metric_type\n";
		if($metric_type eq "DERIVE") {
			print "$field.min 0\n";
		}
		if(defined $ENV{'critical'}) {
			print "$field.critical " . ($ENV{'max'} * $ENV{'critical'} / 100), "\n";
		}
		if(defined $ENV{'warning'}) {
			print "$field.warning " . ($ENV{'max'} * $ENV{'warning'} / 100), "\n";
		}	
	}
}

sub fetch() {
	# Fetch bean values (through jmx) via the command line. We basically run the class "org.munin.plugin.jmx.Beans"
	# with the parameters <bean> and <filter>, the <bean> being a bean pattern to fetch (in this case
	# "com.smartdate.$package_name:name=$service_nameServerInfomation", and <filter> being @metric_names (the array of fields
	# we're actually interested in). We can fetch multiple fields by listing them all as parameters, or list all fields
	# by not supplying a filter (only a bean).
	open(CMD, "-|", $java, "-cp", $munin_jar, "org.munin.plugin.jmx.Beans", $beans, @metric_names) 
		or die "Error: could not run \"$java -cp $munin_jar org.munin.plugin.jmx.Beans @metric_names\": $!";

	while(my $line = <CMD>) {
		chomp($line);
		if($line =~ /^[^\t]+:name=([^\t"]+)\t([^\t]+)\t([^\t]+)$/) {
			my $num   = $3;
			my $field = "v" . $2; # Prefix with a known good char, as field names can't start with a number
			$field =~ s/[^A-Za-z0-9]/_/g;
			print "$field.value $num\n";
		}
	}
	close(CMD);
}

$ENV{'ip'} = $ip;
$ENV{'port'} = $port;

if(defined $ARGV[0] and $ARGV[0] eq "config") {
	config();
} else {
	fetch();
}

# vim: ts=4:ai:et:syntax=perl
