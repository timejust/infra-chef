################################
# Service-Calendar Config File #
################################

# This file has all the default settings, so all these could be removed with no visible effect.
# Modify as needed.

akka {
  version = "1.3-RC1" # Akka version, checked against the runtime version of Akka.

  enabled-modules = ["http"]     # Comma separated list of the enabled modules. Options: ["remote", "camel", "http"]

  time-unit = "seconds"    # Time unit for all timeout properties throughout the config

  # These boot classes are loaded (and created) automatically when the Akka Microkernel boots up
  #     Can be used to bootstrap your application(s)
  #     Should be the FQN (Fully Qualified Name) of the boot class which needs to have a default constructor
  boot = ["com.timejust.bootstrap.calendar.Boot"]

  #http {
  #  hostname = "localhost"  #change to "0.0.0.0" for non-loopback access
  #  port = 9998
  #}
  
  # event handlers to register at boot time (EventHandler$DefaultListener logs to STDOUT)
  event-handlers = ["akka.event.EventHandler$DefaultListener"]
  event-handler-level = "<%=@akka[:log_level]%>" # Options: ERROR, WARNING, INFO, DEBUG
  
  actor {
      timeout = 5                        # Default timeout for Future based invocations
                                         #    - Actor:        ? and ask
                                         #    - UntypedActor: ask
                                         #    - TypedActor:   methods with non-void return type
      serialize-messages = off           # Does a deep clone of (non-primitive) messages to ensure immutability
      throughput = 1                     # Default throughput for all ExecutorBasedEventDrivenDispatcher, set to 1 for complete fairness
      throughput-deadline-time = -1      # Default throughput deadline for all ExecutorBasedEventDrivenDispatcher, set to 0 or negative for no deadline
      dispatcher-shutdown-timeout = 1    # Using the akka.time-unit, how long dispatchers by default will wait for new actors until they shut down
      
  }
        
  debug {
      receive = "true"        # enable function of Actor.loggable(), which is
                              # to log any received message at DEBUG level
      autoreceive = "true"    # enable DEBUG logging of all AutoReceiveMessages
                              # (Kill, PoisonPill and the like)
      lifecycle = "true"      # enable DEBUG logging of actor lifecycle changes
  }
  
  http {
    timeout = <%=@akka[:http_timeout]%>
  }
}

service-calendar {
  calendar-db {
    host = "<%=@calendar_database[:host]%>"
    database = "<%=@calendar_database[:database]%>"
    username = "<%=@calendar_database[:username]%>"
    password = "<%=@calendar_database[:password]%>"
    encoding = "<%=@calendar_database[:encoding]%>"
  }  
}

service-ga {
  indexer {
    prefix = "com.timejust.ga.index" 
    redis {
      host = "<%=@redis[:host]%>"
      port = "<%=@redis[:port]%>"
    }
  }
}

isokron {
  timetag-api-url = "http://dev.isokron.com/1/timetag.json"
  direction-api-url = "http://dev.isokron.com/1/directions.json"
  api-key = "R6Frafre426seyUch8wufrak"
  api-key-direction = "TSFEkeeXKW0DSBjA9npa"
}


