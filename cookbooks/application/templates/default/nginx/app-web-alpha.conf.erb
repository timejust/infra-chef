# nginx + thin
#
# Generated by Chef for <%= node[:fqdn] %>
# Local modifications will be overwritten.
#

<%- if @ssl %>
upstream thin_server_<%= @app %>_ssl {
<%- else %>
upstream thin_server_<%= @app %> {
<%- end %>
    
  server unix:/tmp/<%= @app %>/thin.0.sock
}

server {
    <%- if @ssl %>
    listen                  <%= @port %>;
    ssl                     on;
    <%- else %>
    listen                  <%= @port %>;
    <%- end %>
    server_name             <%= @server_name %>;    
    client_max_body_size    20M;
    keepalive_timeout       5;

    # Location of our static files
    root                    <%= @docroot %>/public;
	
    <%- if @ssl %>
    # SSL Certificates
    ssl_certificate         /etc/ssl/<%= @ssl_crt %>;
    ssl_certificate_key     /etc/ssl/<%= @ssl_key %>;
    <%- end %>


    # Retrieve client's IP address in HTTP request, rather than load balancer.
    # See http://wiki.nginx.org/NginxHttpRealIpModule.
    set_real_ip_from        <%= @set_real_ip_from %>;
    real_ip_header          X-Forwarded-For;
    
    # Block ipranges
    if ($ip_ranges) {
      return 403;
    }
	  
    location / {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;

      # For geo ip module
      #proxy_set_header COUNTRYCODE        "$geoip_city_country_code";
      #proxy_set_header COUNTRYNAME        "$geoip_city_country_name";
      #proxy_set_header REGION             "$geoip_region";
      #proxy_set_header CITY               "$geoip_city";
      #proxy_set_header POSTALCODE         "$geoip_postal_code";
      #proxy_set_header CONTINENTALCODE    "$geoip_city_continent_code";
      #proxy_set_header LATITUDE           "$geoip_latitude";
      #proxy_set_header LONGITUDE          "$geoip_longitude";
	   

      # If you don't find the filename in the static files
      # Then request it from the unicorn server
      if (!-f $request_filename) {
        <%- if @ssl %>
        proxy_pass http://thin_server_<%= @app %>_ssl;
        <%- else %>
        proxy_pass http://thin_server_<%= @app %>;
        <%- end %>
        break;
      }
    }
    
    error_page 500 502 503 504 404 /maintenance.html;
    location = /maintenance.html {
      root <%= @docroot %>/public;
    }

    # Caching by setting expiration to far future date
    location ~ ^/javascripts/(.*)$ {
      if (-f $request_filename) {
        expires         max;
        break;
      }
    }                                     

    location ~ ^/stylesheets/(.*)$ {
      if (-f $request_filename) {
        expires         max;
        break;
      }
    }

    location ~ ^/images/(.*)$ {
      if (-f $request_filename) {
        expires         max;
        break;
      }
    }

    # Obfuscation for s3
    #location /system/datas/ {
    #  expires             max;
    #  proxy_pass          http://s3.amazonaws.com/smartdate-<%= @environment %>/datas/;
    #}
    
    # Obfuscation for s3
    #location /system/photos/ {
    #  expires             max;
    #  proxy_pass          http://s3.amazonaws.com/smartdate-<%= @environment %>/photos/;
    #} 

    # Obfuscation for s3
    #location /pdf/ {
    #  expires             max;
    #  proxy_pass          http://s3.amazonaws.com/smartdate-<%= @environment %>/;
    #}
}
